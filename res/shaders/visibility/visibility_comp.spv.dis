; SPIR-V
; Version: 1.6
; Generator: Khronos Glslang Reference Front End; 11
; Bound: 599
; Schema: 0
               OpCapability Shader
               OpCapability Int64
               OpCapability PhysicalStorageBufferAddresses
          %3 = OpExtInstImport "GLSL.std.450"
               OpMemoryModel PhysicalStorageBuffer64 GLSL450
               OpEntryPoint GLCompute %main "main" %gl_GlobalInvocationID %pc %_ %__0
               OpExecutionMode %main LocalSize 64 1 1
          %1 = OpString "C:\\Users\\Justi\\source\\repos\\VulkanRenderer\\VulkanRenderer\\res\\shaders\\visibility\\visibility_comp.comp"
          %2 = OpString "C:/Users/Justi/source/repos/VulkanRenderer/VulkanRenderer/res/shaders/visibility/../include/gpu_scene_structures.glsl"
               OpSource GLSL 450 %1 "#version 450

#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_buffer_reference : require
#extension GL_EXT_buffer_reference_uvec2 : require
#extension GL_EXT_scalar_block_layout : require

#include \"../include/gpu_scene_structures.glsl\"

layout(local_size_x = 64) in;

layout(push_constant) uniform CullingPushConstantsAddrs {
    vec4 frusPlanes[6];
    uint64_t meshIDBufferAddr;
    uint64_t visibleMeshOutBufferAddr;
    vec4 frusPoints[8];
    uint64_t visibleCountBufferAddr;
    uint meshCount;
    uint rebuildTransforms;
} pc;

layout(buffer_reference, scalar) readonly buffer MeshIDBuffer {
    uint meshIDs[];
};


layout(set = 0, binding = 0, scalar) readonly buffer GlobalAddressTableBuffer {
    GPUAddressTable globalAddressTable;
};

layout(set = 1, binding = 0, scalar) readonly buffer FrameAddressTableBuffer {
    GPUAddressTable frameAddressTable;
};


bool boxInFrustum(AABB box);
AABB transformAABB(AABB localBox, mat4 transform);

void main() {
    uint index = gl_GlobalInvocationID.x;
    if (index >= pc.meshCount)
        return;

    MeshIDBuffer meshIDBuffer = MeshIDBuffer(pc.meshIDBufferAddr);
    uint meshIndex = meshIDBuffer.meshIDs[index];

    MeshBuffer meshBuffer = MeshBuffer(globalAddressTable.addrs[ABT_Mesh]);
    Mesh mesh = meshBuffer.meshes[meshIndex];

    // Set to 0 at first run if transforms aren't uploaded to gpu
    if (pc.rebuildTransforms == 1) {
        TransformsListBuffer transformsBuffer = TransformsListBuffer(globalAddressTable.addrs[ABT_Transforms]);
        mat4 transform = transformsBuffer.transforms[meshIndex];
        AABB worldAABB = transformAABB(mesh.localAABB, transform);
        meshBuffer.meshes[meshIndex].worldAABB = worldAABB;
    }

    AABB aabbToTest = meshBuffer.meshes[meshIndex].worldAABB;

    if (!boxInFrustum(aabbToTest))
        return;

    VisibleCountBuffer vcBuffer = VisibleCountBuffer(pc.visibleCountBufferAddr);
    uint outputIndex = atomicAdd(vcBuffer.visibleCount, 1);

    VisibleMeshIDBuffer visibleBuf = VisibleMeshIDBuffer(pc.visibleMeshOutBufferAddr);
    visibleBuf.visibleMeshIDs[outputIndex] = meshIndex;
}

bool boxInFrustum(AABB box) {
    vec3 center = (box.vmax + box.vmin) * 0.5;
    vec3 extents = (box.vmax - box.vmin) * 0.5;

    float minSafeRadius = box.sphereRadius * 0.01;
    float safeRadius = max(box.sphereRadius, minSafeRadius);

    for (int i = 0; i < 6; ++i) {
        vec3 normal = vec3(pc.frusPlanes[i]);
        float d = pc.frusPlanes[i].w;

        float dist = dot(normal, center) + d;
        if (dist < -safeRadius)
            return false;

        float r = extents.x * abs(normal.x)
                + extents.y * abs(normal.y)
                + extents.z * abs(normal.z);

        if (dist + r < 0.0)
            return false;
    }

    int outFrus;
    outFrus = 0; for (int i = 0; i < 8; ++i) outFrus += int(pc.frusPoints[i].x > box.vmax.x); if (outFrus == 8) return false;
    outFrus = 0; for (int i = 0; i < 8; ++i) outFrus += int(pc.frusPoints[i].x < box.vmin.x); if (outFrus == 8) return false;
    outFrus = 0; for (int i = 0; i < 8; ++i) outFrus += int(pc.frusPoints[i].y > box.vmax.y); if (outFrus == 8) return false;
    outFrus = 0; for (int i = 0; i < 8; ++i) outFrus += int(pc.frusPoints[i].y < box.vmin.y); if (outFrus == 8) return false;
    outFrus = 0; for (int i = 0; i < 8; ++i) outFrus += int(pc.frusPoints[i].z > box.vmax.z); if (outFrus == 8) return false;
    outFrus = 0; for (int i = 0; i < 8; ++i) outFrus += int(pc.frusPoints[i].z < box.vmin.z); if (outFrus == 8) return false;

    return true;
}

AABB transformAABB(AABB localBox, mat4 transform) {
    vec3 vmin = localBox.vmin;
    vec3 vmax = localBox.vmax;

    vec3 corners[8];
    corners[0] = vec3(transform * vec4(vmin.x, vmin.y, vmin.z, 1.0));
    corners[1] = vec3(transform * vec4(vmin.x, vmax.y, vmin.z, 1.0));
    corners[2] = vec3(transform * vec4(vmin.x, vmin.y, vmax.z, 1.0));
    corners[3] = vec3(transform * vec4(vmin.x, vmax.y, vmax.z, 1.0));
    corners[4] = vec3(transform * vec4(vmax.x, vmin.y, vmin.z, 1.0));
    corners[5] = vec3(transform * vec4(vmax.x, vmax.y, vmin.z, 1.0));
    corners[6] = vec3(transform * vec4(vmax.x, vmin.y, vmax.z, 1.0));
    corners[7] = vec3(transform * vec4(vmax.x, vmax.y, vmax.z, 1.0));

    vec3 newVmin = corners[0];
    vec3 newVmax = corners[0];

    for (int i = 1; i < 8; ++i) {
        newVmin = min(newVmin, corners[i]);
        newVmax = max(newVmax, corners[i]);
    }

    AABB worldBox;
    worldBox.vmin = newVmin;
    worldBox.vmax = newVmax;
    worldBox.origin = 0.5 * (newVmin + newVmax);
    worldBox.extent = 0.5 * (newVmax - newVmin);
    worldBox.sphereRadius = length(worldBox.extent);

    return worldBox;
}"
               OpSource GLSL 450 %2 "#extension GL_EXT_buffer_reference : require
#extension GL_EXT_scalar_block_layout : require
#extension GL_ARB_gpu_shader_int64 : require

#ifndef GPU_SCENE_STRUCTURES_GLSL
#define GPU_SCENE_STRUCTURES_GLSL

struct SceneData {
    mat4 view;
    mat4 proj;
    mat4 viewproj;
    vec4 ambientColor;
    vec4 sunlightDirection; // .w = power
    vec4 sunlightColor;
    vec4 cameraPos;
};

// Number of env sets stored in the buffer (must match C++ side)
const uint MAX_ENV_SETS = 16u;

struct EnvMapBindingSet {
    vec4 mapIndices[MAX_ENV_SETS];
    // x = diffuseMapIndex
    // y = specularMapIndex
    // z = brdfLUTIndex
    // w = skyboxMapIndex
};

struct AABB {
	vec3 vmin; // origin: 0.5f * (vmin + vmax)
	vec3 vmax; // extent: 0.5f * (vmax - vmin)
	vec3 origin;
	vec3 extent;
	float sphereRadius;
};

struct Vertex {
    vec3 position;
    vec3 normal;
    vec2 uv;
    vec4 color;
};


struct Material {
    vec4 colorFactor;
    vec2 metalRoughFactors;

    uint albedoLUTIndex;
    uint metalRoughLUTIndex;
    uint normalLUTIndex;
    uint aoLUTIndex;

    vec3 emissiveColor;
    float emissiveStrength;

    float ambientOcclusion;
    float normalScale;
    float alphaCutoff;
    uint passType;
};

struct Mesh {
    AABB localAABB;
    AABB worldAABB;
    uint drawRangeID;
};


struct Instance {
    uint instanceID;
    uint materialID;
    uint meshID;
    uint transformID;
};

// Enum address buffer types
const uint ABT_OpaqueInstances          = 0u; // frame
const uint ABT_OpaqueIndirectDraws      = 1u; // frame
const uint ABT_TransparentInstances     = 2u; // frame
const uint ABT_TransparentIndirectDraws = 3u; // frame
const uint ABT_Material                 = 4u; // global
const uint ABT_Mesh                     = 5u; // global
const uint ABT_DrawRange                = 6u; // global
const uint ABT_Vertex                   = 7u; // global
const uint ABT_Index                    = 8u; // global
const uint ABT_Transforms               = 9u; // frame
const uint ABT_VisibleCount             = 10u; // frame
const uint ABT_VisibleMeshIDs           = 11u; // frame
const uint ABT_Count                    = 12u;

struct GPUAddressTable {
    uint64_t addrs[ABT_Count];
};

struct GPUDrawRange {
    uint firstIndex;
    uint indexCount;
    uint vertexOffset;
    uint vertexCount;
};

struct IndirectDrawCmd {
    uint indexCount;
    uint instanceCount;
    uint firstIndex;
    int vertexOffset;
    uint firstInstance;
};

// GPU-only buffers

// Opaque and transparent data is a render time upload
// Only visible data makes it through

// Opaque
layout(buffer_reference, scalar) readonly buffer OpaqueInstances {
    Instance opaqueInstances[];
};
layout(buffer_reference, scalar) readonly buffer OpaqueIndirectDraws {
    IndirectDrawCmd opaqueIndirect[];
};

// Transparent
layout(buffer_reference, scalar) readonly buffer TransparentInstances {
    Instance transparentInstances[];
};
layout(buffer_reference, scalar) readonly buffer TransparentIndirectDraws {
    IndirectDrawCmd transparentIndirect[];
};

// ranges, materials, vertices, indices, all ready at render time and uploaded at end of asset loading
layout(buffer_reference, scalar) readonly buffer DrawRangeBuffer {
    GPUDrawRange ranges[];
};

layout(buffer_reference, scalar) readonly buffer MaterialBuffer {
    Material materials[];
};

layout(buffer_reference, scalar) readonly buffer VertexBuffer {
    Vertex vertices[];
};

layout(buffer_reference, scalar) readonly buffer IndexBuffer {
    uint indices[];
};

layout(buffer_reference, scalar) readonly buffer TransformsListBuffer {
    mat4 transforms[];
};

// In current cpu based setup, worldAABBs are done on cpu after main upload,
// all thats present here currently is localAABB and drawRangeIndex
layout(buffer_reference, scalar) readonly buffer MeshBuffer {
    Mesh meshes[];
};


// Inactives
layout(buffer_reference, scalar) writeonly buffer VisibleCountBuffer {
    uint visibleCount;
};

layout(buffer_reference, scalar) writeonly buffer VisibleMeshIDBuffer {
    uint visibleMeshIDs[];
};

#endif"
               OpSourceExtension "GL_ARB_gpu_shader_int64"
               OpSourceExtension "GL_EXT_buffer_reference"
               OpSourceExtension "GL_EXT_buffer_reference_uvec2"
               OpSourceExtension "GL_EXT_scalar_block_layout"
               OpSourceExtension "GL_GOOGLE_cpp_style_line_directive"
               OpSourceExtension "GL_GOOGLE_include_directive"
               OpName %main "main"
               OpName %AABB "AABB"
               OpMemberName %AABB 0 "vmin"
               OpMemberName %AABB 1 "vmax"
               OpMemberName %AABB 2 "origin"
               OpMemberName %AABB 3 "extent"
               OpMemberName %AABB 4 "sphereRadius"
               OpName %boxInFrustum_struct_AABB_vf3_vf3_vf3_vf3_f11_ "boxInFrustum(struct-AABB-vf3-vf3-vf3-vf3-f11;"
               OpName %box "box"
               OpName %transformAABB_struct_AABB_vf3_vf3_vf3_vf3_f11_mf44_ "transformAABB(struct-AABB-vf3-vf3-vf3-vf3-f11;mf44;"
               OpName %localBox "localBox"
               OpName %transform "transform"
               OpName %index "index"
               OpName %gl_GlobalInvocationID "gl_GlobalInvocationID"
               OpName %CullingPushConstantsAddrs "CullingPushConstantsAddrs"
               OpMemberName %CullingPushConstantsAddrs 0 "frusPlanes"
               OpMemberName %CullingPushConstantsAddrs 1 "meshIDBufferAddr"
               OpMemberName %CullingPushConstantsAddrs 2 "visibleMeshOutBufferAddr"
               OpMemberName %CullingPushConstantsAddrs 3 "frusPoints"
               OpMemberName %CullingPushConstantsAddrs 4 "visibleCountBufferAddr"
               OpMemberName %CullingPushConstantsAddrs 5 "meshCount"
               OpMemberName %CullingPushConstantsAddrs 6 "rebuildTransforms"
               OpName %pc "pc"
               OpName %MeshIDBuffer "MeshIDBuffer"
               OpMemberName %MeshIDBuffer 0 "meshIDs"
               OpName %meshIDBuffer "meshIDBuffer"
               OpName %meshIndex "meshIndex"
               OpName %AABB_0 "AABB"
               OpMemberName %AABB_0 0 "vmin"
               OpMemberName %AABB_0 1 "vmax"
               OpMemberName %AABB_0 2 "origin"
               OpMemberName %AABB_0 3 "extent"
               OpMemberName %AABB_0 4 "sphereRadius"
               OpName %Mesh "Mesh"
               OpMemberName %Mesh 0 "localAABB"
               OpMemberName %Mesh 1 "worldAABB"
               OpMemberName %Mesh 2 "drawRangeID"
               OpName %MeshBuffer "MeshBuffer"
               OpMemberName %MeshBuffer 0 "meshes"
               OpName %meshBuffer "meshBuffer"
               OpName %GPUAddressTable "GPUAddressTable"
               OpMemberName %GPUAddressTable 0 "addrs"
               OpName %GlobalAddressTableBuffer "GlobalAddressTableBuffer"
               OpMemberName %GlobalAddressTableBuffer 0 "globalAddressTable"
               OpName %_ ""
               OpName %Mesh_0 "Mesh"
               OpMemberName %Mesh_0 0 "localAABB"
               OpMemberName %Mesh_0 1 "worldAABB"
               OpMemberName %Mesh_0 2 "drawRangeID"
               OpName %mesh "mesh"
               OpName %TransformsListBuffer "TransformsListBuffer"
               OpMemberName %TransformsListBuffer 0 "transforms"
               OpName %transformsBuffer "transformsBuffer"
               OpName %transform_0 "transform"
               OpName %worldAABB "worldAABB"
               OpName %param "param"
               OpName %param_0 "param"
               OpName %aabbToTest "aabbToTest"
               OpName %param_1 "param"
               OpName %VisibleCountBuffer "VisibleCountBuffer"
               OpMemberName %VisibleCountBuffer 0 "visibleCount"
               OpName %vcBuffer "vcBuffer"
               OpName %outputIndex "outputIndex"
               OpName %VisibleMeshIDBuffer "VisibleMeshIDBuffer"
               OpMemberName %VisibleMeshIDBuffer 0 "visibleMeshIDs"
               OpName %visibleBuf "visibleBuf"
               OpName %center "center"
               OpName %extents "extents"
               OpName %minSafeRadius "minSafeRadius"
               OpName %safeRadius "safeRadius"
               OpName %i "i"
               OpName %normal "normal"
               OpName %d "d"
               OpName %dist "dist"
               OpName %r "r"
               OpName %outFrus "outFrus"
               OpName %i_0 "i"
               OpName %i_1 "i"
               OpName %i_2 "i"
               OpName %i_3 "i"
               OpName %i_4 "i"
               OpName %i_5 "i"
               OpName %vmin "vmin"
               OpName %vmax "vmax"
               OpName %corners "corners"
               OpName %newVmin "newVmin"
               OpName %newVmax "newVmax"
               OpName %i_6 "i"
               OpName %worldBox "worldBox"
               OpName %FrameAddressTableBuffer "FrameAddressTableBuffer"
               OpMemberName %FrameAddressTableBuffer 0 "frameAddressTable"
               OpName %__0 ""
               OpModuleProcessed "client vulkan100"
               OpModuleProcessed "target-env spirv1.6"
               OpModuleProcessed "target-env vulkan1.4"
               OpModuleProcessed "entry-point main"
               OpDecorate %gl_GlobalInvocationID BuiltIn GlobalInvocationId
               OpDecorate %_arr_v4float_uint_6 ArrayStride 16
               OpDecorate %_arr_v4float_uint_8 ArrayStride 16
               OpDecorate %CullingPushConstantsAddrs Block
               OpMemberDecorate %CullingPushConstantsAddrs 0 Offset 0
               OpMemberDecorate %CullingPushConstantsAddrs 1 Offset 96
               OpMemberDecorate %CullingPushConstantsAddrs 2 Offset 104
               OpMemberDecorate %CullingPushConstantsAddrs 3 Offset 112
               OpMemberDecorate %CullingPushConstantsAddrs 4 Offset 240
               OpMemberDecorate %CullingPushConstantsAddrs 5 Offset 248
               OpMemberDecorate %CullingPushConstantsAddrs 6 Offset 252
               OpDecorate %_runtimearr_uint ArrayStride 4
               OpDecorate %MeshIDBuffer Block
               OpMemberDecorate %MeshIDBuffer 0 NonWritable
               OpMemberDecorate %MeshIDBuffer 0 Offset 0
               OpDecorate %meshIDBuffer AliasedPointer
               OpMemberDecorate %AABB_0 0 Offset 0
               OpMemberDecorate %AABB_0 1 Offset 12
               OpMemberDecorate %AABB_0 2 Offset 24
               OpMemberDecorate %AABB_0 3 Offset 36
               OpMemberDecorate %AABB_0 4 Offset 48
               OpMemberDecorate %Mesh 0 Offset 0
               OpMemberDecorate %Mesh 1 Offset 52
               OpMemberDecorate %Mesh 2 Offset 104
               OpDecorate %_runtimearr_Mesh ArrayStride 108
               OpDecorate %MeshBuffer Block
               OpMemberDecorate %MeshBuffer 0 NonWritable
               OpMemberDecorate %MeshBuffer 0 Offset 0
               OpDecorate %meshBuffer AliasedPointer
               OpDecorate %_arr_ulong_uint_12 ArrayStride 8
               OpMemberDecorate %GPUAddressTable 0 Offset 0
               OpDecorate %GlobalAddressTableBuffer Block
               OpMemberDecorate %GlobalAddressTableBuffer 0 NonWritable
               OpMemberDecorate %GlobalAddressTableBuffer 0 Offset 0
               OpDecorate %_ NonWritable
               OpDecorate %_ Binding 0
               OpDecorate %_ DescriptorSet 0
               OpDecorate %_runtimearr_mat4v4float ArrayStride 64
               OpDecorate %TransformsListBuffer Block
               OpMemberDecorate %TransformsListBuffer 0 ColMajor
               OpMemberDecorate %TransformsListBuffer 0 MatrixStride 16
               OpMemberDecorate %TransformsListBuffer 0 NonWritable
               OpMemberDecorate %TransformsListBuffer 0 Offset 0
               OpDecorate %transformsBuffer AliasedPointer
               OpDecorate %VisibleCountBuffer Block
               OpMemberDecorate %VisibleCountBuffer 0 NonReadable
               OpMemberDecorate %VisibleCountBuffer 0 Offset 0
               OpDecorate %vcBuffer AliasedPointer
               OpDecorate %_runtimearr_uint_0 ArrayStride 4
               OpDecorate %VisibleMeshIDBuffer Block
               OpMemberDecorate %VisibleMeshIDBuffer 0 NonReadable
               OpMemberDecorate %VisibleMeshIDBuffer 0 Offset 0
               OpDecorate %visibleBuf AliasedPointer
               OpDecorate %FrameAddressTableBuffer Block
               OpMemberDecorate %FrameAddressTableBuffer 0 NonWritable
               OpMemberDecorate %FrameAddressTableBuffer 0 Offset 0
               OpDecorate %__0 NonWritable
               OpDecorate %__0 Binding 0
               OpDecorate %__0 DescriptorSet 1
       %void = OpTypeVoid
          %5 = OpTypeFunction %void
      %float = OpTypeFloat 32
    %v3float = OpTypeVector %float 3
       %AABB = OpTypeStruct %v3float %v3float %v3float %v3float %float
%_ptr_Function_AABB = OpTypePointer Function %AABB
       %bool = OpTypeBool
         %13 = OpTypeFunction %bool %_ptr_Function_AABB
    %v4float = OpTypeVector %float 4
%mat4v4float = OpTypeMatrix %v4float 4
%_ptr_Function_mat4v4float = OpTypePointer Function %mat4v4float
         %20 = OpTypeFunction %AABB %_ptr_Function_AABB %_ptr_Function_mat4v4float
       %uint = OpTypeInt 32 0
%_ptr_Function_uint = OpTypePointer Function %uint
     %v3uint = OpTypeVector %uint 3
%_ptr_Input_v3uint = OpTypePointer Input %v3uint
%gl_GlobalInvocationID = OpVariable %_ptr_Input_v3uint Input
     %uint_0 = OpConstant %uint 0
%_ptr_Input_uint = OpTypePointer Input %uint
     %uint_6 = OpConstant %uint 6
%_arr_v4float_uint_6 = OpTypeArray %v4float %uint_6
      %ulong = OpTypeInt 64 0
     %uint_8 = OpConstant %uint 8
%_arr_v4float_uint_8 = OpTypeArray %v4float %uint_8
%CullingPushConstantsAddrs = OpTypeStruct %_arr_v4float_uint_6 %ulong %ulong %_arr_v4float_uint_8 %ulong %uint %uint
%_ptr_PushConstant_CullingPushConstantsAddrs = OpTypePointer PushConstant %CullingPushConstantsAddrs
         %pc = OpVariable %_ptr_PushConstant_CullingPushConstantsAddrs PushConstant
        %int = OpTypeInt 32 1
      %int_5 = OpConstant %int 5
%_ptr_PushConstant_uint = OpTypePointer PushConstant %uint
               OpTypeForwardPointer %_ptr_PhysicalStorageBuffer_MeshIDBuffer PhysicalStorageBuffer
%_runtimearr_uint = OpTypeRuntimeArray %uint
%MeshIDBuffer = OpTypeStruct %_runtimearr_uint
%_ptr_PhysicalStorageBuffer_MeshIDBuffer = OpTypePointer PhysicalStorageBuffer %MeshIDBuffer
%_ptr_Function__ptr_PhysicalStorageBuffer_MeshIDBuffer = OpTypePointer Function %_ptr_PhysicalStorageBuffer_MeshIDBuffer
      %int_1 = OpConstant %int 1
%_ptr_PushConstant_ulong = OpTypePointer PushConstant %ulong
      %int_0 = OpConstant %int 0
%_ptr_PhysicalStorageBuffer_uint = OpTypePointer PhysicalStorageBuffer %uint
               OpTypeForwardPointer %_ptr_PhysicalStorageBuffer_MeshBuffer PhysicalStorageBuffer
     %AABB_0 = OpTypeStruct %v3float %v3float %v3float %v3float %float
       %Mesh = OpTypeStruct %AABB_0 %AABB_0 %uint
%_runtimearr_Mesh = OpTypeRuntimeArray %Mesh
 %MeshBuffer = OpTypeStruct %_runtimearr_Mesh
%_ptr_PhysicalStorageBuffer_MeshBuffer = OpTypePointer PhysicalStorageBuffer %MeshBuffer
%_ptr_Function__ptr_PhysicalStorageBuffer_MeshBuffer = OpTypePointer Function %_ptr_PhysicalStorageBuffer_MeshBuffer
    %uint_12 = OpConstant %uint 12
%_arr_ulong_uint_12 = OpTypeArray %ulong %uint_12
%GPUAddressTable = OpTypeStruct %_arr_ulong_uint_12
%GlobalAddressTableBuffer = OpTypeStruct %GPUAddressTable
%_ptr_StorageBuffer_GlobalAddressTableBuffer = OpTypePointer StorageBuffer %GlobalAddressTableBuffer
          %_ = OpVariable %_ptr_StorageBuffer_GlobalAddressTableBuffer StorageBuffer
%_ptr_StorageBuffer_ulong = OpTypePointer StorageBuffer %ulong
     %Mesh_0 = OpTypeStruct %AABB %AABB %uint
%_ptr_Function_Mesh_0 = OpTypePointer Function %Mesh_0
%_ptr_PhysicalStorageBuffer_Mesh = OpTypePointer PhysicalStorageBuffer %Mesh
      %int_6 = OpConstant %int 6
     %uint_1 = OpConstant %uint 1
               OpTypeForwardPointer %_ptr_PhysicalStorageBuffer_TransformsListBuffer PhysicalStorageBuffer
%_runtimearr_mat4v4float = OpTypeRuntimeArray %mat4v4float
%TransformsListBuffer = OpTypeStruct %_runtimearr_mat4v4float
%_ptr_PhysicalStorageBuffer_TransformsListBuffer = OpTypePointer PhysicalStorageBuffer %TransformsListBuffer
%_ptr_Function__ptr_PhysicalStorageBuffer_TransformsListBuffer = OpTypePointer Function %_ptr_PhysicalStorageBuffer_TransformsListBuffer
      %int_9 = OpConstant %int 9
%_ptr_PhysicalStorageBuffer_mat4v4float = OpTypePointer PhysicalStorageBuffer %mat4v4float
%_ptr_PhysicalStorageBuffer_AABB_0 = OpTypePointer PhysicalStorageBuffer %AABB_0
               OpTypeForwardPointer %_ptr_PhysicalStorageBuffer_VisibleCountBuffer PhysicalStorageBuffer
%VisibleCountBuffer = OpTypeStruct %uint
%_ptr_PhysicalStorageBuffer_VisibleCountBuffer = OpTypePointer PhysicalStorageBuffer %VisibleCountBuffer
%_ptr_Function__ptr_PhysicalStorageBuffer_VisibleCountBuffer = OpTypePointer Function %_ptr_PhysicalStorageBuffer_VisibleCountBuffer
      %int_4 = OpConstant %int 4
               OpTypeForwardPointer %_ptr_PhysicalStorageBuffer_VisibleMeshIDBuffer PhysicalStorageBuffer
%_runtimearr_uint_0 = OpTypeRuntimeArray %uint
%VisibleMeshIDBuffer = OpTypeStruct %_runtimearr_uint_0
%_ptr_PhysicalStorageBuffer_VisibleMeshIDBuffer = OpTypePointer PhysicalStorageBuffer %VisibleMeshIDBuffer
%_ptr_Function__ptr_PhysicalStorageBuffer_VisibleMeshIDBuffer = OpTypePointer Function %_ptr_PhysicalStorageBuffer_VisibleMeshIDBuffer
      %int_2 = OpConstant %int 2
%_ptr_Function_v3float = OpTypePointer Function %v3float
  %float_0_5 = OpConstant %float 0.5
%_ptr_Function_float = OpTypePointer Function %float
%float_0_00999999978 = OpConstant %float 0.00999999978
%_ptr_Function_int = OpTypePointer Function %int
%_ptr_PushConstant_v4float = OpTypePointer PushConstant %v4float
     %uint_3 = OpConstant %uint 3
%_ptr_PushConstant_float = OpTypePointer PushConstant %float
      %false = OpConstantFalse %bool
     %uint_2 = OpConstant %uint 2
    %float_0 = OpConstant %float 0
      %int_8 = OpConstant %int 8
      %int_3 = OpConstant %int 3
       %true = OpConstantTrue %bool
%_arr_v3float_uint_8 = OpTypeArray %v3float %uint_8
%_ptr_Function__arr_v3float_uint_8 = OpTypePointer Function %_arr_v3float_uint_8
    %float_1 = OpConstant %float 1
      %int_7 = OpConstant %int 7
    %uint_16 = OpConstant %uint 16
     %uint_4 = OpConstant %uint 4
     %uint_5 = OpConstant %uint 5
     %uint_7 = OpConstant %uint 7
     %uint_9 = OpConstant %uint 9
    %uint_10 = OpConstant %uint 10
    %uint_11 = OpConstant %uint 11
    %uint_64 = OpConstant %uint 64
        %595 = OpConstantComposite %v3uint %uint_64 %uint_1 %uint_1
%FrameAddressTableBuffer = OpTypeStruct %GPUAddressTable
%_ptr_StorageBuffer_FrameAddressTableBuffer = OpTypePointer StorageBuffer %FrameAddressTableBuffer
        %__0 = OpVariable %_ptr_StorageBuffer_FrameAddressTableBuffer StorageBuffer
               OpLine %1 39 11
       %main = OpFunction %void None %5
          %7 = OpLabel
      %index = OpVariable %_ptr_Function_uint Function
%meshIDBuffer = OpVariable %_ptr_Function__ptr_PhysicalStorageBuffer_MeshIDBuffer Function
  %meshIndex = OpVariable %_ptr_Function_uint Function
 %meshBuffer = OpVariable %_ptr_Function__ptr_PhysicalStorageBuffer_MeshBuffer Function
       %mesh = OpVariable %_ptr_Function_Mesh_0 Function
%transformsBuffer = OpVariable %_ptr_Function__ptr_PhysicalStorageBuffer_TransformsListBuffer Function
%transform_0 = OpVariable %_ptr_Function_mat4v4float Function
  %worldAABB = OpVariable %_ptr_Function_AABB Function
      %param = OpVariable %_ptr_Function_AABB Function
    %param_0 = OpVariable %_ptr_Function_mat4v4float Function
 %aabbToTest = OpVariable %_ptr_Function_AABB Function
    %param_1 = OpVariable %_ptr_Function_AABB Function
   %vcBuffer = OpVariable %_ptr_Function__ptr_PhysicalStorageBuffer_VisibleCountBuffer Function
%outputIndex = OpVariable %_ptr_Function_uint Function
 %visibleBuf = OpVariable %_ptr_Function__ptr_PhysicalStorageBuffer_VisibleMeshIDBuffer Function
               OpLine %1 40 0
         %33 = OpAccessChain %_ptr_Input_uint %gl_GlobalInvocationID %uint_0
         %34 = OpLoad %uint %33
               OpStore %index %34
               OpLine %1 41 0
         %35 = OpLoad %uint %index
         %47 = OpAccessChain %_ptr_PushConstant_uint %pc %int_5
         %48 = OpLoad %uint %47
         %49 = OpUGreaterThanEqual %bool %35 %48
               OpSelectionMerge %51 None
               OpBranchConditional %49 %50 %51
         %50 = OpLabel
               OpLine %1 42 0
               OpReturn
         %51 = OpLabel
               OpLine %1 44 0
         %60 = OpAccessChain %_ptr_PushConstant_ulong %pc %int_1
         %61 = OpLoad %ulong %60
         %62 = OpConvertUToPtr %_ptr_PhysicalStorageBuffer_MeshIDBuffer %61
               OpStore %meshIDBuffer %62
               OpLine %1 45 0
         %64 = OpLoad %_ptr_PhysicalStorageBuffer_MeshIDBuffer %meshIDBuffer
         %66 = OpLoad %uint %index
         %68 = OpAccessChain %_ptr_PhysicalStorageBuffer_uint %64 %int_0 %66
         %69 = OpLoad %uint %68 Aligned 4
               OpStore %meshIndex %69
               OpLine %1 47 0
         %84 = OpAccessChain %_ptr_StorageBuffer_ulong %_ %int_0 %int_0 %int_5
         %85 = OpLoad %ulong %84
         %86 = OpConvertUToPtr %_ptr_PhysicalStorageBuffer_MeshBuffer %85
               OpStore %meshBuffer %86
               OpLine %1 48 0
         %90 = OpLoad %_ptr_PhysicalStorageBuffer_MeshBuffer %meshBuffer
         %91 = OpLoad %uint %meshIndex
         %93 = OpAccessChain %_ptr_PhysicalStorageBuffer_Mesh %90 %int_0 %91
         %94 = OpLoad %Mesh %93 Aligned 4
         %95 = OpCopyLogical %Mesh_0 %94
               OpStore %mesh %95
               OpLine %1 51 0
         %97 = OpAccessChain %_ptr_PushConstant_uint %pc %int_6
         %98 = OpLoad %uint %97
        %100 = OpIEqual %bool %98 %uint_1
               OpSelectionMerge %102 None
               OpBranchConditional %100 %101 %102
        %101 = OpLabel
               OpLine %1 52 0
        %109 = OpAccessChain %_ptr_StorageBuffer_ulong %_ %int_0 %int_0 %int_9
        %110 = OpLoad %ulong %109
        %111 = OpConvertUToPtr %_ptr_PhysicalStorageBuffer_TransformsListBuffer %110
               OpStore %transformsBuffer %111
               OpLine %1 53 0
        %113 = OpLoad %_ptr_PhysicalStorageBuffer_TransformsListBuffer %transformsBuffer
        %114 = OpLoad %uint %meshIndex
        %116 = OpAccessChain %_ptr_PhysicalStorageBuffer_mat4v4float %113 %int_0 %114
        %117 = OpLoad %mat4v4float %116 Aligned 16
               OpStore %transform_0 %117
               OpLine %1 54 0
        %120 = OpAccessChain %_ptr_Function_AABB %mesh %int_0
        %121 = OpLoad %AABB %120
               OpStore %param %121
        %123 = OpLoad %mat4v4float %transform_0
               OpStore %param_0 %123
        %124 = OpFunctionCall %AABB %transformAABB_struct_AABB_vf3_vf3_vf3_vf3_f11_mf44_ %param %param_0
               OpStore %worldAABB %124
               OpLine %1 55 0
        %125 = OpLoad %_ptr_PhysicalStorageBuffer_MeshBuffer %meshBuffer
        %126 = OpLoad %uint %meshIndex
        %127 = OpLoad %AABB %worldAABB
        %129 = OpAccessChain %_ptr_PhysicalStorageBuffer_AABB_0 %125 %int_0 %126 %int_1
        %130 = OpCopyLogical %AABB_0 %127
               OpStore %129 %130 Aligned 4
               OpBranch %102
        %102 = OpLabel
               OpLine %1 58 0
        %132 = OpLoad %_ptr_PhysicalStorageBuffer_MeshBuffer %meshBuffer
        %133 = OpLoad %uint %meshIndex
        %134 = OpAccessChain %_ptr_PhysicalStorageBuffer_AABB_0 %132 %int_0 %133 %int_1
        %135 = OpLoad %AABB_0 %134 Aligned 4
        %136 = OpCopyLogical %AABB %135
               OpStore %aabbToTest %136
               OpLine %1 60 0
        %138 = OpLoad %AABB %aabbToTest
               OpStore %param_1 %138
        %139 = OpFunctionCall %bool %boxInFrustum_struct_AABB_vf3_vf3_vf3_vf3_f11_ %param_1
        %140 = OpLogicalNot %bool %139
               OpSelectionMerge %142 None
               OpBranchConditional %140 %141 %142
        %141 = OpLabel
               OpLine %1 61 0
               OpReturn
        %142 = OpLabel
               OpLine %1 63 0
        %149 = OpAccessChain %_ptr_PushConstant_ulong %pc %int_4
        %150 = OpLoad %ulong %149
        %151 = OpConvertUToPtr %_ptr_PhysicalStorageBuffer_VisibleCountBuffer %150
               OpStore %vcBuffer %151
               OpLine %1 64 0
        %153 = OpLoad %_ptr_PhysicalStorageBuffer_VisibleCountBuffer %vcBuffer
        %154 = OpAccessChain %_ptr_PhysicalStorageBuffer_uint %153 %int_0
        %155 = OpAtomicIAdd %uint %154 %uint_1 %uint_0 %uint_1
               OpStore %outputIndex %155
               OpLine %1 66 0
        %162 = OpAccessChain %_ptr_PushConstant_ulong %pc %int_2
        %163 = OpLoad %ulong %162
        %164 = OpConvertUToPtr %_ptr_PhysicalStorageBuffer_VisibleMeshIDBuffer %163
               OpStore %visibleBuf %164
               OpLine %1 67 0
        %165 = OpLoad %_ptr_PhysicalStorageBuffer_VisibleMeshIDBuffer %visibleBuf
        %166 = OpLoad %uint %outputIndex
        %167 = OpLoad %uint %meshIndex
        %168 = OpAccessChain %_ptr_PhysicalStorageBuffer_uint %165 %int_0 %166
               OpStore %168 %167 Aligned 4
               OpLine %1 68 0
               OpReturn
               OpFunctionEnd
               OpLine %1 70 27
%boxInFrustum_struct_AABB_vf3_vf3_vf3_vf3_f11_ = OpFunction %bool None %13
        %box = OpFunctionParameter %_ptr_Function_AABB
         %16 = OpLabel
     %center = OpVariable %_ptr_Function_v3float Function
    %extents = OpVariable %_ptr_Function_v3float Function
%minSafeRadius = OpVariable %_ptr_Function_float Function
 %safeRadius = OpVariable %_ptr_Function_float Function
          %i = OpVariable %_ptr_Function_int Function
     %normal = OpVariable %_ptr_Function_v3float Function
          %d = OpVariable %_ptr_Function_float Function
       %dist = OpVariable %_ptr_Function_float Function
          %r = OpVariable %_ptr_Function_float Function
    %outFrus = OpVariable %_ptr_Function_int Function
        %i_0 = OpVariable %_ptr_Function_int Function
        %i_1 = OpVariable %_ptr_Function_int Function
        %i_2 = OpVariable %_ptr_Function_int Function
        %i_3 = OpVariable %_ptr_Function_int Function
        %i_4 = OpVariable %_ptr_Function_int Function
        %i_5 = OpVariable %_ptr_Function_int Function
               OpLine %1 71 0
        %171 = OpAccessChain %_ptr_Function_v3float %box %int_1
        %172 = OpLoad %v3float %171
        %173 = OpAccessChain %_ptr_Function_v3float %box %int_0
        %174 = OpLoad %v3float %173
        %175 = OpFAdd %v3float %172 %174
        %177 = OpVectorTimesScalar %v3float %175 %float_0_5
               OpStore %center %177
               OpLine %1 72 0
        %179 = OpAccessChain %_ptr_Function_v3float %box %int_1
        %180 = OpLoad %v3float %179
        %181 = OpAccessChain %_ptr_Function_v3float %box %int_0
        %182 = OpLoad %v3float %181
        %183 = OpFSub %v3float %180 %182
        %184 = OpVectorTimesScalar %v3float %183 %float_0_5
               OpStore %extents %184
               OpLine %1 74 0
        %187 = OpAccessChain %_ptr_Function_float %box %int_4
        %188 = OpLoad %float %187
        %190 = OpFMul %float %188 %float_0_00999999978
               OpStore %minSafeRadius %190
               OpLine %1 75 0
        %192 = OpAccessChain %_ptr_Function_float %box %int_4
        %193 = OpLoad %float %192
        %194 = OpLoad %float %minSafeRadius
        %195 = OpExtInst %float %3 FMax %193 %194
               OpStore %safeRadius %195
               OpLine %1 77 0
               OpStore %i %int_0
               OpBranch %198
        %198 = OpLabel
               OpLine %1 77 0
               OpLoopMerge %200 %201 None
               OpBranch %202
        %202 = OpLabel
               OpLine %1 77 0
        %203 = OpLoad %int %i
        %204 = OpSLessThan %bool %203 %int_6
               OpBranchConditional %204 %199 %200
        %199 = OpLabel
               OpLine %1 78 0
        %206 = OpLoad %int %i
        %208 = OpAccessChain %_ptr_PushConstant_v4float %pc %int_0 %206
        %209 = OpLoad %v4float %208
        %210 = OpCompositeExtract %float %209 0
        %211 = OpCompositeExtract %float %209 1
        %212 = OpCompositeExtract %float %209 2
        %213 = OpCompositeConstruct %v3float %210 %211 %212
               OpStore %normal %213
               OpLine %1 79 0
        %215 = OpLoad %int %i
        %218 = OpAccessChain %_ptr_PushConstant_float %pc %int_0 %215 %uint_3
        %219 = OpLoad %float %218
               OpStore %d %219
               OpLine %1 81 0
        %221 = OpLoad %v3float %normal
        %222 = OpLoad %v3float %center
        %223 = OpDot %float %221 %222
        %224 = OpLoad %float %d
        %225 = OpFAdd %float %223 %224
               OpStore %dist %225
               OpLine %1 82 0
        %226 = OpLoad %float %dist
        %227 = OpLoad %float %safeRadius
        %228 = OpFNegate %float %227
        %229 = OpFOrdLessThan %bool %226 %228
               OpSelectionMerge %231 None
               OpBranchConditional %229 %230 %231
        %230 = OpLabel
               OpLine %1 83 0
               OpReturnValue %false
        %231 = OpLabel
               OpLine %1 85 0
        %235 = OpAccessChain %_ptr_Function_float %extents %uint_0
        %236 = OpLoad %float %235
        %237 = OpAccessChain %_ptr_Function_float %normal %uint_0
        %238 = OpLoad %float %237
        %239 = OpExtInst %float %3 FAbs %238
        %240 = OpFMul %float %236 %239
               OpLine %1 86 0
        %241 = OpAccessChain %_ptr_Function_float %extents %uint_1
        %242 = OpLoad %float %241
        %243 = OpAccessChain %_ptr_Function_float %normal %uint_1
        %244 = OpLoad %float %243
        %245 = OpExtInst %float %3 FAbs %244
        %246 = OpFMul %float %242 %245
        %247 = OpFAdd %float %240 %246
               OpLine %1 87 0
        %249 = OpAccessChain %_ptr_Function_float %extents %uint_2
        %250 = OpLoad %float %249
        %251 = OpAccessChain %_ptr_Function_float %normal %uint_2
        %252 = OpLoad %float %251
        %253 = OpExtInst %float %3 FAbs %252
        %254 = OpFMul %float %250 %253
        %255 = OpFAdd %float %247 %254
               OpLine %1 85 0
               OpStore %r %255
               OpLine %1 89 0
        %256 = OpLoad %float %dist
        %257 = OpLoad %float %r
        %258 = OpFAdd %float %256 %257
        %260 = OpFOrdLessThan %bool %258 %float_0
               OpSelectionMerge %262 None
               OpBranchConditional %260 %261 %262
        %261 = OpLabel
               OpLine %1 90 0
               OpReturnValue %false
        %262 = OpLabel
               OpBranch %201
        %201 = OpLabel
               OpLine %1 77 0
        %264 = OpLoad %int %i
        %265 = OpIAdd %int %264 %int_1
               OpStore %i %265
               OpBranch %198
        %200 = OpLabel
               OpLine %1 94 0
               OpStore %outFrus %int_0
               OpStore %i_0 %int_0
               OpBranch %268
        %268 = OpLabel
               OpLine %1 94 0
               OpLoopMerge %270 %271 None
               OpBranch %272
        %272 = OpLabel
               OpLine %1 94 0
        %273 = OpLoad %int %i_0
        %275 = OpSLessThan %bool %273 %int_8
               OpBranchConditional %275 %269 %270
        %269 = OpLabel
               OpLine %1 94 0
        %277 = OpLoad %int %i_0
        %278 = OpAccessChain %_ptr_PushConstant_float %pc %int_3 %277 %uint_0
        %279 = OpLoad %float %278
        %280 = OpAccessChain %_ptr_Function_float %box %int_1 %uint_0
        %281 = OpLoad %float %280
        %282 = OpFOrdGreaterThan %bool %279 %281
        %283 = OpSelect %int %282 %int_1 %int_0
        %284 = OpLoad %int %outFrus
        %285 = OpIAdd %int %284 %283
               OpStore %outFrus %285
               OpBranch %271
        %271 = OpLabel
               OpLine %1 94 0
        %286 = OpLoad %int %i_0
        %287 = OpIAdd %int %286 %int_1
               OpStore %i_0 %287
               OpBranch %268
        %270 = OpLabel
               OpLine %1 94 0
        %288 = OpLoad %int %outFrus
        %289 = OpIEqual %bool %288 %int_8
               OpSelectionMerge %291 None
               OpBranchConditional %289 %290 %291
        %290 = OpLabel
               OpLine %1 94 0
               OpReturnValue %false
        %291 = OpLabel
               OpLine %1 95 0
               OpStore %outFrus %int_0
               OpStore %i_1 %int_0
               OpBranch %294
        %294 = OpLabel
               OpLine %1 95 0
               OpLoopMerge %296 %297 None
               OpBranch %298
        %298 = OpLabel
               OpLine %1 95 0
        %299 = OpLoad %int %i_1
        %300 = OpSLessThan %bool %299 %int_8
               OpBranchConditional %300 %295 %296
        %295 = OpLabel
               OpLine %1 95 0
        %301 = OpLoad %int %i_1
        %302 = OpAccessChain %_ptr_PushConstant_float %pc %int_3 %301 %uint_0
        %303 = OpLoad %float %302
        %304 = OpAccessChain %_ptr_Function_float %box %int_0 %uint_0
        %305 = OpLoad %float %304
        %306 = OpFOrdLessThan %bool %303 %305
        %307 = OpSelect %int %306 %int_1 %int_0
        %308 = OpLoad %int %outFrus
        %309 = OpIAdd %int %308 %307
               OpStore %outFrus %309
               OpBranch %297
        %297 = OpLabel
               OpLine %1 95 0
        %310 = OpLoad %int %i_1
        %311 = OpIAdd %int %310 %int_1
               OpStore %i_1 %311
               OpBranch %294
        %296 = OpLabel
               OpLine %1 95 0
        %312 = OpLoad %int %outFrus
        %313 = OpIEqual %bool %312 %int_8
               OpSelectionMerge %315 None
               OpBranchConditional %313 %314 %315
        %314 = OpLabel
               OpLine %1 95 0
               OpReturnValue %false
        %315 = OpLabel
               OpLine %1 96 0
               OpStore %outFrus %int_0
               OpStore %i_2 %int_0
               OpBranch %318
        %318 = OpLabel
               OpLine %1 96 0
               OpLoopMerge %320 %321 None
               OpBranch %322
        %322 = OpLabel
               OpLine %1 96 0
        %323 = OpLoad %int %i_2
        %324 = OpSLessThan %bool %323 %int_8
               OpBranchConditional %324 %319 %320
        %319 = OpLabel
               OpLine %1 96 0
        %325 = OpLoad %int %i_2
        %326 = OpAccessChain %_ptr_PushConstant_float %pc %int_3 %325 %uint_1
        %327 = OpLoad %float %326
        %328 = OpAccessChain %_ptr_Function_float %box %int_1 %uint_1
        %329 = OpLoad %float %328
        %330 = OpFOrdGreaterThan %bool %327 %329
        %331 = OpSelect %int %330 %int_1 %int_0
        %332 = OpLoad %int %outFrus
        %333 = OpIAdd %int %332 %331
               OpStore %outFrus %333
               OpBranch %321
        %321 = OpLabel
               OpLine %1 96 0
        %334 = OpLoad %int %i_2
        %335 = OpIAdd %int %334 %int_1
               OpStore %i_2 %335
               OpBranch %318
        %320 = OpLabel
               OpLine %1 96 0
        %336 = OpLoad %int %outFrus
        %337 = OpIEqual %bool %336 %int_8
               OpSelectionMerge %339 None
               OpBranchConditional %337 %338 %339
        %338 = OpLabel
               OpLine %1 96 0
               OpReturnValue %false
        %339 = OpLabel
               OpLine %1 97 0
               OpStore %outFrus %int_0
               OpStore %i_3 %int_0
               OpBranch %342
        %342 = OpLabel
               OpLine %1 97 0
               OpLoopMerge %344 %345 None
               OpBranch %346
        %346 = OpLabel
               OpLine %1 97 0
        %347 = OpLoad %int %i_3
        %348 = OpSLessThan %bool %347 %int_8
               OpBranchConditional %348 %343 %344
        %343 = OpLabel
               OpLine %1 97 0
        %349 = OpLoad %int %i_3
        %350 = OpAccessChain %_ptr_PushConstant_float %pc %int_3 %349 %uint_1
        %351 = OpLoad %float %350
        %352 = OpAccessChain %_ptr_Function_float %box %int_0 %uint_1
        %353 = OpLoad %float %352
        %354 = OpFOrdLessThan %bool %351 %353
        %355 = OpSelect %int %354 %int_1 %int_0
        %356 = OpLoad %int %outFrus
        %357 = OpIAdd %int %356 %355
               OpStore %outFrus %357
               OpBranch %345
        %345 = OpLabel
               OpLine %1 97 0
        %358 = OpLoad %int %i_3
        %359 = OpIAdd %int %358 %int_1
               OpStore %i_3 %359
               OpBranch %342
        %344 = OpLabel
               OpLine %1 97 0
        %360 = OpLoad %int %outFrus
        %361 = OpIEqual %bool %360 %int_8
               OpSelectionMerge %363 None
               OpBranchConditional %361 %362 %363
        %362 = OpLabel
               OpLine %1 97 0
               OpReturnValue %false
        %363 = OpLabel
               OpLine %1 98 0
               OpStore %outFrus %int_0
               OpStore %i_4 %int_0
               OpBranch %366
        %366 = OpLabel
               OpLine %1 98 0
               OpLoopMerge %368 %369 None
               OpBranch %370
        %370 = OpLabel
               OpLine %1 98 0
        %371 = OpLoad %int %i_4
        %372 = OpSLessThan %bool %371 %int_8
               OpBranchConditional %372 %367 %368
        %367 = OpLabel
               OpLine %1 98 0
        %373 = OpLoad %int %i_4
        %374 = OpAccessChain %_ptr_PushConstant_float %pc %int_3 %373 %uint_2
        %375 = OpLoad %float %374
        %376 = OpAccessChain %_ptr_Function_float %box %int_1 %uint_2
        %377 = OpLoad %float %376
        %378 = OpFOrdGreaterThan %bool %375 %377
        %379 = OpSelect %int %378 %int_1 %int_0
        %380 = OpLoad %int %outFrus
        %381 = OpIAdd %int %380 %379
               OpStore %outFrus %381
               OpBranch %369
        %369 = OpLabel
               OpLine %1 98 0
        %382 = OpLoad %int %i_4
        %383 = OpIAdd %int %382 %int_1
               OpStore %i_4 %383
               OpBranch %366
        %368 = OpLabel
               OpLine %1 98 0
        %384 = OpLoad %int %outFrus
        %385 = OpIEqual %bool %384 %int_8
               OpSelectionMerge %387 None
               OpBranchConditional %385 %386 %387
        %386 = OpLabel
               OpLine %1 98 0
               OpReturnValue %false
        %387 = OpLabel
               OpLine %1 99 0
               OpStore %outFrus %int_0
               OpStore %i_5 %int_0
               OpBranch %390
        %390 = OpLabel
               OpLine %1 99 0
               OpLoopMerge %392 %393 None
               OpBranch %394
        %394 = OpLabel
               OpLine %1 99 0
        %395 = OpLoad %int %i_5
        %396 = OpSLessThan %bool %395 %int_8
               OpBranchConditional %396 %391 %392
        %391 = OpLabel
               OpLine %1 99 0
        %397 = OpLoad %int %i_5
        %398 = OpAccessChain %_ptr_PushConstant_float %pc %int_3 %397 %uint_2
        %399 = OpLoad %float %398
        %400 = OpAccessChain %_ptr_Function_float %box %int_0 %uint_2
        %401 = OpLoad %float %400
        %402 = OpFOrdLessThan %bool %399 %401
        %403 = OpSelect %int %402 %int_1 %int_0
        %404 = OpLoad %int %outFrus
        %405 = OpIAdd %int %404 %403
               OpStore %outFrus %405
               OpBranch %393
        %393 = OpLabel
               OpLine %1 99 0
        %406 = OpLoad %int %i_5
        %407 = OpIAdd %int %406 %int_1
               OpStore %i_5 %407
               OpBranch %390
        %392 = OpLabel
               OpLine %1 99 0
        %408 = OpLoad %int %outFrus
        %409 = OpIEqual %bool %408 %int_8
               OpSelectionMerge %411 None
               OpBranchConditional %409 %410 %411
        %410 = OpLabel
               OpLine %1 99 0
               OpReturnValue %false
        %411 = OpLabel
               OpLine %1 101 0
               OpReturnValue %true
               OpFunctionEnd
               OpLine %1 104 49
%transformAABB_struct_AABB_vf3_vf3_vf3_vf3_f11_mf44_ = OpFunction %AABB None %20
   %localBox = OpFunctionParameter %_ptr_Function_AABB
  %transform = OpFunctionParameter %_ptr_Function_mat4v4float
         %24 = OpLabel
       %vmin = OpVariable %_ptr_Function_v3float Function
       %vmax = OpVariable %_ptr_Function_v3float Function
    %corners = OpVariable %_ptr_Function__arr_v3float_uint_8 Function
    %newVmin = OpVariable %_ptr_Function_v3float Function
    %newVmax = OpVariable %_ptr_Function_v3float Function
        %i_6 = OpVariable %_ptr_Function_int Function
   %worldBox = OpVariable %_ptr_Function_AABB Function
               OpLine %1 105 0
        %417 = OpAccessChain %_ptr_Function_v3float %localBox %int_0
        %418 = OpLoad %v3float %417
               OpStore %vmin %418
               OpLine %1 106 0
        %420 = OpAccessChain %_ptr_Function_v3float %localBox %int_1
        %421 = OpLoad %v3float %420
               OpStore %vmax %421
               OpLine %1 109 0
        %425 = OpLoad %mat4v4float %transform
        %426 = OpAccessChain %_ptr_Function_float %vmin %uint_0
        %427 = OpLoad %float %426
        %428 = OpAccessChain %_ptr_Function_float %vmin %uint_1
        %429 = OpLoad %float %428
        %430 = OpAccessChain %_ptr_Function_float %vmin %uint_2
        %431 = OpLoad %float %430
        %433 = OpCompositeConstruct %v4float %427 %429 %431 %float_1
        %434 = OpMatrixTimesVector %v4float %425 %433
        %435 = OpCompositeExtract %float %434 0
        %436 = OpCompositeExtract %float %434 1
        %437 = OpCompositeExtract %float %434 2
        %438 = OpCompositeConstruct %v3float %435 %436 %437
        %439 = OpAccessChain %_ptr_Function_v3float %corners %int_0
               OpStore %439 %438
               OpLine %1 110 0
        %440 = OpLoad %mat4v4float %transform
        %441 = OpAccessChain %_ptr_Function_float %vmin %uint_0
        %442 = OpLoad %float %441
        %443 = OpAccessChain %_ptr_Function_float %vmax %uint_1
        %444 = OpLoad %float %443
        %445 = OpAccessChain %_ptr_Function_float %vmin %uint_2
        %446 = OpLoad %float %445
        %447 = OpCompositeConstruct %v4float %442 %444 %446 %float_1
        %448 = OpMatrixTimesVector %v4float %440 %447
        %449 = OpCompositeExtract %float %448 0
        %450 = OpCompositeExtract %float %448 1
        %451 = OpCompositeExtract %float %448 2
        %452 = OpCompositeConstruct %v3float %449 %450 %451
        %453 = OpAccessChain %_ptr_Function_v3float %corners %int_1
               OpStore %453 %452
               OpLine %1 111 0
        %454 = OpLoad %mat4v4float %transform
        %455 = OpAccessChain %_ptr_Function_float %vmin %uint_0
        %456 = OpLoad %float %455
        %457 = OpAccessChain %_ptr_Function_float %vmin %uint_1
        %458 = OpLoad %float %457
        %459 = OpAccessChain %_ptr_Function_float %vmax %uint_2
        %460 = OpLoad %float %459
        %461 = OpCompositeConstruct %v4float %456 %458 %460 %float_1
        %462 = OpMatrixTimesVector %v4float %454 %461
        %463 = OpCompositeExtract %float %462 0
        %464 = OpCompositeExtract %float %462 1
        %465 = OpCompositeExtract %float %462 2
        %466 = OpCompositeConstruct %v3float %463 %464 %465
        %467 = OpAccessChain %_ptr_Function_v3float %corners %int_2
               OpStore %467 %466
               OpLine %1 112 0
        %468 = OpLoad %mat4v4float %transform
        %469 = OpAccessChain %_ptr_Function_float %vmin %uint_0
        %470 = OpLoad %float %469
        %471 = OpAccessChain %_ptr_Function_float %vmax %uint_1
        %472 = OpLoad %float %471
        %473 = OpAccessChain %_ptr_Function_float %vmax %uint_2
        %474 = OpLoad %float %473
        %475 = OpCompositeConstruct %v4float %470 %472 %474 %float_1
        %476 = OpMatrixTimesVector %v4float %468 %475
        %477 = OpCompositeExtract %float %476 0
        %478 = OpCompositeExtract %float %476 1
        %479 = OpCompositeExtract %float %476 2
        %480 = OpCompositeConstruct %v3float %477 %478 %479
        %481 = OpAccessChain %_ptr_Function_v3float %corners %int_3
               OpStore %481 %480
               OpLine %1 113 0
        %482 = OpLoad %mat4v4float %transform
        %483 = OpAccessChain %_ptr_Function_float %vmax %uint_0
        %484 = OpLoad %float %483
        %485 = OpAccessChain %_ptr_Function_float %vmin %uint_1
        %486 = OpLoad %float %485
        %487 = OpAccessChain %_ptr_Function_float %vmin %uint_2
        %488 = OpLoad %float %487
        %489 = OpCompositeConstruct %v4float %484 %486 %488 %float_1
        %490 = OpMatrixTimesVector %v4float %482 %489
        %491 = OpCompositeExtract %float %490 0
        %492 = OpCompositeExtract %float %490 1
        %493 = OpCompositeExtract %float %490 2
        %494 = OpCompositeConstruct %v3float %491 %492 %493
        %495 = OpAccessChain %_ptr_Function_v3float %corners %int_4
               OpStore %495 %494
               OpLine %1 114 0
        %496 = OpLoad %mat4v4float %transform
        %497 = OpAccessChain %_ptr_Function_float %vmax %uint_0
        %498 = OpLoad %float %497
        %499 = OpAccessChain %_ptr_Function_float %vmax %uint_1
        %500 = OpLoad %float %499
        %501 = OpAccessChain %_ptr_Function_float %vmin %uint_2
        %502 = OpLoad %float %501
        %503 = OpCompositeConstruct %v4float %498 %500 %502 %float_1
        %504 = OpMatrixTimesVector %v4float %496 %503
        %505 = OpCompositeExtract %float %504 0
        %506 = OpCompositeExtract %float %504 1
        %507 = OpCompositeExtract %float %504 2
        %508 = OpCompositeConstruct %v3float %505 %506 %507
        %509 = OpAccessChain %_ptr_Function_v3float %corners %int_5
               OpStore %509 %508
               OpLine %1 115 0
        %510 = OpLoad %mat4v4float %transform
        %511 = OpAccessChain %_ptr_Function_float %vmax %uint_0
        %512 = OpLoad %float %511
        %513 = OpAccessChain %_ptr_Function_float %vmin %uint_1
        %514 = OpLoad %float %513
        %515 = OpAccessChain %_ptr_Function_float %vmax %uint_2
        %516 = OpLoad %float %515
        %517 = OpCompositeConstruct %v4float %512 %514 %516 %float_1
        %518 = OpMatrixTimesVector %v4float %510 %517
        %519 = OpCompositeExtract %float %518 0
        %520 = OpCompositeExtract %float %518 1
        %521 = OpCompositeExtract %float %518 2
        %522 = OpCompositeConstruct %v3float %519 %520 %521
        %523 = OpAccessChain %_ptr_Function_v3float %corners %int_6
               OpStore %523 %522
               OpLine %1 116 0
        %525 = OpLoad %mat4v4float %transform
        %526 = OpAccessChain %_ptr_Function_float %vmax %uint_0
        %527 = OpLoad %float %526
        %528 = OpAccessChain %_ptr_Function_float %vmax %uint_1
        %529 = OpLoad %float %528
        %530 = OpAccessChain %_ptr_Function_float %vmax %uint_2
        %531 = OpLoad %float %530
        %532 = OpCompositeConstruct %v4float %527 %529 %531 %float_1
        %533 = OpMatrixTimesVector %v4float %525 %532
        %534 = OpCompositeExtract %float %533 0
        %535 = OpCompositeExtract %float %533 1
        %536 = OpCompositeExtract %float %533 2
        %537 = OpCompositeConstruct %v3float %534 %535 %536
        %538 = OpAccessChain %_ptr_Function_v3float %corners %int_7
               OpStore %538 %537
               OpLine %1 118 0
        %540 = OpAccessChain %_ptr_Function_v3float %corners %int_0
        %541 = OpLoad %v3float %540
               OpStore %newVmin %541
               OpLine %1 119 0
        %543 = OpAccessChain %_ptr_Function_v3float %corners %int_0
        %544 = OpLoad %v3float %543
               OpStore %newVmax %544
               OpLine %1 121 0
               OpStore %i_6 %int_1
               OpBranch %546
        %546 = OpLabel
               OpLine %1 121 0
               OpLoopMerge %548 %549 None
               OpBranch %550
        %550 = OpLabel
               OpLine %1 121 0
        %551 = OpLoad %int %i_6
        %552 = OpSLessThan %bool %551 %int_8
               OpBranchConditional %552 %547 %548
        %547 = OpLabel
               OpLine %1 122 0
        %553 = OpLoad %v3float %newVmin
        %554 = OpLoad %int %i_6
        %555 = OpAccessChain %_ptr_Function_v3float %corners %554
        %556 = OpLoad %v3float %555
        %557 = OpExtInst %v3float %3 FMin %553 %556
               OpStore %newVmin %557
               OpLine %1 123 0
        %558 = OpLoad %v3float %newVmax
        %559 = OpLoad %int %i_6
        %560 = OpAccessChain %_ptr_Function_v3float %corners %559
        %561 = OpLoad %v3float %560
        %562 = OpExtInst %v3float %3 FMax %558 %561
               OpStore %newVmax %562
               OpBranch %549
        %549 = OpLabel
               OpLine %1 121 0
        %563 = OpLoad %int %i_6
        %564 = OpIAdd %int %563 %int_1
               OpStore %i_6 %564
               OpBranch %546
        %548 = OpLabel
               OpLine %1 127 0
        %566 = OpLoad %v3float %newVmin
        %567 = OpAccessChain %_ptr_Function_v3float %worldBox %int_0
               OpStore %567 %566
               OpLine %1 128 0
        %568 = OpLoad %v3float %newVmax
        %569 = OpAccessChain %_ptr_Function_v3float %worldBox %int_1
               OpStore %569 %568
               OpLine %1 129 0
        %570 = OpLoad %v3float %newVmin
        %571 = OpLoad %v3float %newVmax
        %572 = OpFAdd %v3float %570 %571
        %573 = OpVectorTimesScalar %v3float %572 %float_0_5
        %574 = OpAccessChain %_ptr_Function_v3float %worldBox %int_2
               OpStore %574 %573
               OpLine %1 130 0
        %575 = OpLoad %v3float %newVmax
        %576 = OpLoad %v3float %newVmin
        %577 = OpFSub %v3float %575 %576
        %578 = OpVectorTimesScalar %v3float %577 %float_0_5
        %579 = OpAccessChain %_ptr_Function_v3float %worldBox %int_3
               OpStore %579 %578
               OpLine %1 131 0
        %580 = OpAccessChain %_ptr_Function_v3float %worldBox %int_3
        %581 = OpLoad %v3float %580
        %582 = OpExtInst %float %3 Length %581
        %583 = OpAccessChain %_ptr_Function_float %worldBox %int_4
               OpStore %583 %582
               OpLine %1 133 0
        %584 = OpLoad %AABB %worldBox
               OpReturnValue %584
               OpFunctionEnd
