; SPIR-V
; Version: 1.6
; Generator: Khronos Glslang Reference Front End; 11
; Bound: 75
; Schema: 0
               OpCapability Shader
               OpCapability ShaderNonUniform
               OpCapability RuntimeDescriptorArray
               OpCapability SampledImageArrayNonUniformIndexing
               OpCapability PhysicalStorageBufferAddresses
          %3 = OpExtInstImport "GLSL.std.450"
               OpMemoryModel PhysicalStorageBuffer64 GLSL450
               OpEntryPoint Fragment %main "main" %fragPos %_ %envMaps %outColor
               OpExecutionMode %main OriginUpperLeft
          %1 = OpString "C:\\Users\\Justi\\source\\repos\\VulkanRenderer\\VulkanRenderer\\res\\shaders\\environment\\skybox_frag.frag"
          %2 = OpString "C:/Users/Justi/source/repos/VulkanRenderer/VulkanRenderer/res/shaders/environment/../include/gpu_scene_structures.glsl"
               OpSource GLSL 450 %1 "#version 450

#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_GOOGLE_include_directive : require

#include \"../include/gpu_scene_structures.glsl\"

layout(location = 0) in vec3 fragPos;
layout(location = 0) out vec4 outColor;

layout(set = 0, binding = 1) uniform EnvMapData {
    EnvMapBindingSet envMapSet;
};

layout(set = 0, binding = 2) uniform samplerCube envMaps[];

void main() {
    vec3 dir = normalize(fragPos);
    dir.y = -dir.y;

    uint skyboxIdx = uint(envMapSet.mapIndices[0].w);

    // fetch the HDR/RGB color
    vec3 skyColor = texture(envMaps[nonuniformEXT(skyboxIdx)], dir).rgb;

    skyColor *= 0.25; // darken image a bit

    outColor = vec4(skyColor, 1.0);
}"
               OpSource GLSL 450 %2 "#extension GL_EXT_buffer_reference : require
#extension GL_EXT_scalar_block_layout : require
#extension GL_ARB_gpu_shader_int64 : require

#ifndef GPU_SCENE_STRUCTURES_GLSL
#define GPU_SCENE_STRUCTURES_GLSL

struct SceneData {
    mat4 view;
    mat4 proj;
    mat4 viewproj;
    vec4 ambientColor;
    vec4 sunlightDirection; // .w = power
    vec4 sunlightColor;
    vec4 cameraPos;
};

// Number of env sets stored in the buffer (must match C++ side)
const uint MAX_ENV_SETS = 16u;

struct EnvMapBindingSet {
    vec4 mapIndices[MAX_ENV_SETS];
    // x = diffuseMapIndex
    // y = specularMapIndex
    // z = brdfLUTIndex
    // w = skyboxMapIndex
};

struct AABB {
	vec3 vmin; // origin: 0.5f * (vmin + vmax)
	vec3 vmax; // extent: 0.5f * (vmax - vmin)
	vec3 origin;
	vec3 extent;
	float sphereRadius;
};

struct Vertex {
    vec3 position;
    vec3 normal;
    vec2 uv;
    vec4 color;
};


struct Material {
    vec4 colorFactor;
    vec2 metalRoughFactors;

    uint albedoLUTIndex;
    uint metalRoughLUTIndex;
    uint normalLUTIndex;
    uint aoLUTIndex;

    vec3 emissiveColor;
    float emissiveStrength;

    float ambientOcclusion;
    float normalScale;
    float alphaCutoff;
    uint passType;
};

struct Mesh {
    AABB localAABB;
    AABB worldAABB;
    uint drawRangeID;
};


struct Instance {
    uint instanceID;
    uint materialID;
    uint meshID;
    uint transformID;
};

// Enum address buffer types
const uint ABT_OpaqueInstances          = 0u; // frame
const uint ABT_OpaqueIndirectDraws      = 1u; // frame
const uint ABT_TransparentInstances     = 2u; // frame
const uint ABT_TransparentIndirectDraws = 3u; // frame
const uint ABT_Material                 = 4u; // global
const uint ABT_Mesh                     = 5u; // global
const uint ABT_DrawRange                = 6u; // global
const uint ABT_Vertex                   = 7u; // global
const uint ABT_Index                    = 8u; // global
const uint ABT_Transforms               = 9u; // frame
const uint ABT_VisibleCount             = 10u; // frame
const uint ABT_VisibleMeshIDs           = 11u; // frame
const uint ABT_Count                    = 12u;

struct GPUAddressTable {
    uint64_t addrs[ABT_Count];
};

struct GPUDrawRange {
    uint firstIndex;
    uint indexCount;
    uint vertexOffset;
    uint vertexCount;
};

struct IndirectDrawCmd {
    uint indexCount;
    uint instanceCount;
    uint firstIndex;
    int vertexOffset;
    uint firstInstance;
};

// GPU-only buffers

// Opaque and transparent data is a render time upload
// Only visible data makes it through

// Opaque
layout(buffer_reference, scalar) readonly buffer OpaqueInstances {
    Instance opaqueInstances[];
};
layout(buffer_reference, scalar) readonly buffer OpaqueIndirectDraws {
    IndirectDrawCmd opaqueIndirect[];
};

// Transparent
layout(buffer_reference, scalar) readonly buffer TransparentInstances {
    Instance transparentInstances[];
};
layout(buffer_reference, scalar) readonly buffer TransparentIndirectDraws {
    IndirectDrawCmd transparentIndirect[];
};

// ranges, materials, vertices, indices, all ready at render time and uploaded at end of asset loading
layout(buffer_reference, scalar) readonly buffer DrawRangeBuffer {
    GPUDrawRange ranges[];
};

layout(buffer_reference, scalar) readonly buffer MaterialBuffer {
    Material materials[];
};

layout(buffer_reference, scalar) readonly buffer VertexBuffer {
    Vertex vertices[];
};

layout(buffer_reference, scalar) readonly buffer IndexBuffer {
    uint indices[];
};

layout(buffer_reference, scalar) readonly buffer TransformsListBuffer {
    mat4 transforms[];
};

// In current cpu based setup, worldAABBs are done on cpu after main upload,
// all thats present here currently is localAABB and drawRangeIndex
layout(buffer_reference, scalar) readonly buffer MeshBuffer {
    Mesh meshes[];
};


// Inactives
layout(buffer_reference, scalar) writeonly buffer VisibleCountBuffer {
    uint visibleCount;
};

layout(buffer_reference, scalar) writeonly buffer VisibleMeshIDBuffer {
    uint visibleMeshIDs[];
};

#endif"
               OpSourceExtension "GL_ARB_gpu_shader_int64"
               OpSourceExtension "GL_ARB_separate_shader_objects"
               OpSourceExtension "GL_EXT_buffer_reference"
               OpSourceExtension "GL_EXT_nonuniform_qualifier"
               OpSourceExtension "GL_EXT_scalar_block_layout"
               OpSourceExtension "GL_GOOGLE_cpp_style_line_directive"
               OpSourceExtension "GL_GOOGLE_include_directive"
               OpName %main "main"
               OpName %dir "dir"
               OpName %fragPos "fragPos"
               OpName %skyboxIdx "skyboxIdx"
               OpName %EnvMapBindingSet "EnvMapBindingSet"
               OpMemberName %EnvMapBindingSet 0 "mapIndices"
               OpName %EnvMapData "EnvMapData"
               OpMemberName %EnvMapData 0 "envMapSet"
               OpName %_ ""
               OpName %skyColor "skyColor"
               OpName %envMaps "envMaps"
               OpName %outColor "outColor"
               OpModuleProcessed "client vulkan100"
               OpModuleProcessed "target-env spirv1.6"
               OpModuleProcessed "target-env vulkan1.4"
               OpModuleProcessed "entry-point main"
               OpDecorate %fragPos Location 0
               OpDecorate %_arr_v4float_uint_16 ArrayStride 16
               OpMemberDecorate %EnvMapBindingSet 0 Offset 0
               OpDecorate %EnvMapData Block
               OpMemberDecorate %EnvMapData 0 Offset 0
               OpDecorate %_ Binding 1
               OpDecorate %_ DescriptorSet 0
               OpDecorate %envMaps Binding 2
               OpDecorate %envMaps DescriptorSet 0
               OpDecorate %46 NonUniform
               OpDecorate %48 NonUniform
               OpDecorate %49 NonUniform
               OpDecorate %outColor Location 0
       %void = OpTypeVoid
          %5 = OpTypeFunction %void
      %float = OpTypeFloat 32
    %v3float = OpTypeVector %float 3
%_ptr_Function_v3float = OpTypePointer Function %v3float
%_ptr_Input_v3float = OpTypePointer Input %v3float
    %fragPos = OpVariable %_ptr_Input_v3float Input
       %uint = OpTypeInt 32 0
     %uint_1 = OpConstant %uint 1
%_ptr_Function_float = OpTypePointer Function %float
%_ptr_Function_uint = OpTypePointer Function %uint
    %v4float = OpTypeVector %float 4
    %uint_16 = OpConstant %uint 16
%_arr_v4float_uint_16 = OpTypeArray %v4float %uint_16
%EnvMapBindingSet = OpTypeStruct %_arr_v4float_uint_16
 %EnvMapData = OpTypeStruct %EnvMapBindingSet
%_ptr_Uniform_EnvMapData = OpTypePointer Uniform %EnvMapData
          %_ = OpVariable %_ptr_Uniform_EnvMapData Uniform
        %int = OpTypeInt 32 1
      %int_0 = OpConstant %int 0
     %uint_3 = OpConstant %uint 3
%_ptr_Uniform_float = OpTypePointer Uniform %float
         %40 = OpTypeImage %float Cube 0 0 0 1 Unknown
         %41 = OpTypeSampledImage %40
%_runtimearr_41 = OpTypeRuntimeArray %41
%_ptr_UniformConstant__runtimearr_41 = OpTypePointer UniformConstant %_runtimearr_41
    %envMaps = OpVariable %_ptr_UniformConstant__runtimearr_41 UniformConstant
%_ptr_UniformConstant_41 = OpTypePointer UniformConstant %41
 %float_0_25 = OpConstant %float 0.25
%_ptr_Output_v4float = OpTypePointer Output %v4float
   %outColor = OpVariable %_ptr_Output_v4float Output
    %float_1 = OpConstant %float 1
     %uint_0 = OpConstant %uint 0
     %uint_2 = OpConstant %uint 2
     %uint_4 = OpConstant %uint 4
     %uint_5 = OpConstant %uint 5
     %uint_6 = OpConstant %uint 6
     %uint_7 = OpConstant %uint 7
     %uint_8 = OpConstant %uint 8
     %uint_9 = OpConstant %uint 9
    %uint_10 = OpConstant %uint 10
    %uint_11 = OpConstant %uint 11
    %uint_12 = OpConstant %uint 12
               OpLine %1 18 11
       %main = OpFunction %void None %5
          %7 = OpLabel
        %dir = OpVariable %_ptr_Function_v3float Function
  %skyboxIdx = OpVariable %_ptr_Function_uint Function
   %skyColor = OpVariable %_ptr_Function_v3float Function
               OpLine %1 19 0
         %14 = OpLoad %v3float %fragPos
         %15 = OpExtInst %v3float %3 Normalize %14
               OpStore %dir %15
               OpLine %1 20 0
         %19 = OpAccessChain %_ptr_Function_float %dir %uint_1
         %20 = OpLoad %float %19
         %21 = OpFNegate %float %20
         %22 = OpAccessChain %_ptr_Function_float %dir %uint_1
               OpStore %22 %21
               OpLine %1 22 0
         %36 = OpAccessChain %_ptr_Uniform_float %_ %int_0 %int_0 %int_0 %uint_3
         %37 = OpLoad %float %36
         %38 = OpConvertFToU %uint %37
               OpStore %skyboxIdx %38
               OpLine %1 25 0
         %45 = OpLoad %uint %skyboxIdx
         %46 = OpCopyObject %uint %45
         %48 = OpAccessChain %_ptr_UniformConstant_41 %envMaps %46
         %49 = OpLoad %41 %48
         %50 = OpLoad %v3float %dir
         %51 = OpImageSampleImplicitLod %v4float %49 %50
         %52 = OpVectorShuffle %v3float %51 %51 0 1 2
               OpStore %skyColor %52
               OpLine %1 27 0
         %54 = OpLoad %v3float %skyColor
         %55 = OpVectorTimesScalar %v3float %54 %float_0_25
               OpStore %skyColor %55
               OpLine %1 29 0
         %58 = OpLoad %v3float %skyColor
         %60 = OpCompositeExtract %float %58 0
         %61 = OpCompositeExtract %float %58 1
         %62 = OpCompositeExtract %float %58 2
         %63 = OpCompositeConstruct %v4float %60 %61 %62 %float_1
               OpStore %outColor %63
               OpLine %1 30 0
               OpReturn
               OpFunctionEnd
